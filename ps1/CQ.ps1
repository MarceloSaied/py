########################################################################
# Code Generated By: for "Manage MyEngagement"
# Generated On: 11/25/2015
# Organization: Accenture
########################################################################
$Defects = gc "Defects.txt"
$log="defectsCQ.log"
$maxJobs=5
$timeLimit=120   # in seconds
#--------------------------------------------
#----  Functions               ---------
#--------------------------------------------

#--------------------------------------------
#---------------main acction ----------------
#---------------------------------------------
cls
#cd $ScriptWD
$starttime=$(get-date)
$starttime

$sb = {
		$session = New-PSSession -ComputerName $args[0]
		if ($session.state -eq "Opened"){
			"session oppened to " + $args[0]
			invoke-command -Session $session -Scriptblock {
				$limit=$args[0]
				#functions
					function GetProcessInfoById{
						param([int]$processId)
						Get-WmiObject -class Win32_PerfFormattedData_PerfProc_Process | where{$_.idprocess -eq $processId} | select `
						@{Name="Process Id"; Expression = {$_.idprocess}},`
						@{Name="Counter Name"; Expression = {$_.name}},`
						@{Name="workingSetPrivate"; Expression = {$_.workingSetPrivate / 1kb}}        
					}
					function SendAlert ($Titulo,$mensaje) {
						ACNalertSend.exe -t $Titulo -m $mensaje -i 2 -g  "MME.Server.Alerts" 
						send-mailMessage -To $SendTo1, $SendTo2 ,$SendTo3 ,$SendTo4  -Subject $titulo -From $EmailFrom -SmtpServer $smtpServer -Body "$Body $mensaje" -BodyAsHtml
					}
				#------  email variables --------
					$EmailFrom = "MME.smtp.Monitor@accenture.com"
					$smtpServer = "amr.smtp.accenture.com"
					$SendTo1= "marcelo.saied@accenture.com"
					$SendTo2= "MME.Ops.MonitoringTeam@accenture.com"
					$SendTo3= "andres.echeverria@accenture.com"
					$SendTo4= "julio.f.romero@accenture.com"
				#variables
				$WebSiteNames = "2613_MMEprod","Services"
				$server=hostname
				get-date|Out-File "d:\temp\Report.txt"
				import-module webadministration
				foreach ($WebSiteName in $WebSiteNames){          	
					$processID=$(dir IIS:\AppPools\$($(Get-Item "IIS:\Sites\$WebSiteName"| Select-Object applicationPool).applicationPool)\WorkerProcesses).processid
					$memoria=GetProcessInfoById $processID|select workingSetPrivate
					$memused=$([math]::round(($memoria.workingSetPrivate/ 1MB),2))*1
					echo "$server  $WebSiteName - Used $memused - PID $processID"|Out-File "d:\temp\Report.txt" -append
					echo "$server  $WebSiteName - Used $memused - PID $processID"
					if ([single]$memused -gt [single]$limit){
						invoke-Expression -command "d:\temp\MemSwaper.exe -p $processID"
						$memoriaAfter=GetProcessInfoById $processID|select workingSetPrivate
						$memafter=$([math]::round(($memoriaAfter.workingSetPrivate/1MB),2))
						SendAlert "MemSwaper activated on server $server"  "MemSwaper activated on server $server <br /> website $WebSiteName <br />  Memory before = $memused GB<br /> Memory After = $memafter GB<br /> Treshold at $args GB"
						"MemSwaper activated on server $server \n website $WebSiteName \n Memory before = $memused  \n Memory After = $memafter"|Out-File "d:\temp\Report.txt" -append								
					}
					# return "$processID - $args"
				}
				" "
			} -ErrorAction Stop -argumentlist  $args[1]   #| Out-Host
			remove-pssession -ComputerName $args[0]
		}
	}


#------- loopeo ----------------------------------------------------------------------


$global:Results = @()  # this is the collection in which we will keep job results
$jobs=@()   #hashtable   
	foreach ($Defect in $Defects){
		if ($Defect) {
			"working on defect $Defect"
			$arr = $Defect,$VarNico				
			$jobs += Start-Job -ScriptBlock $sb -ArgumentList $arr
			$running = @($jobs | ? {$_.State -eq 'Running'})
			# Throttle jobs.
			while ($running.Count -ge $maxJobs) {
				$finished=Wait-Job -Job $jobs -Any 
				$running = @($jobs | ? {$_.State -eq 'Running'})
			}
		}		
	}  
Write-host "waiting for jobs "
#$jobs
Write-host "-------------------------------------------------"
Wait-Job -Job $jobs -Timeout $timeLimit > $null
write-host "Data Gthered in "  $((get-date)-$starttime).Totalseconds
 
$results= $jobs | Receive-Job
$results| ft
write-host "Data Gthered in "  $((get-date)-$starttime).Totalseconds

